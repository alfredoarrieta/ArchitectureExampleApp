plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'jacoco'
}

android {
    compileSdkVersion 31
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.example.myapplication"
        minSdkVersion 21
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        dataBinding true
    }

    testOptions {
        // Used for Unit testing Android dependent elements in /test folder
        unitTests.includeAndroidResources = true
        unitTests.returnDefaultValues = true
    }
}

def nav_version = "2.5.0"
def j_unit_version = "4.13.2"
def android_x_test_version = "1.4.0"
def mockito_version = "4.6.1"
def mockito_kotlin_version = "4.0.0"
def mockk_version = "1.12.4"
def koin_version = "3.1.2"
def coroutine_version = "1.6.4"

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.activity:activity-ktx:1.5.0'
    implementation 'androidx.fragment:fragment-ktx:1.5.0'
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'com.google.android.material:material:1.6.1'
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    implementation 'com.android.support:multidex:1.0.3'

    //picasso
    implementation 'com.squareup.picasso:picasso:2.71828'

    //gson
    implementation 'com.google.code.gson:gson:2.8.9'

    // Koin for Kotlin apps
    implementation "io.insert-koin:koin-core:$koin_version"
    testImplementation "io.insert-koin:koin-test:$koin_version"
    testImplementation "io.insert-koin:koin-test-junit4:$koin_version"

    //Rx
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.0'
    implementation 'io.reactivex.rxjava3:rxjava:3.0.0'

    // Kotlin
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
    implementation "androidx.navigation:navigation-dynamic-features-fragment:$nav_version"
    androidTestImplementation "androidx.navigation:navigation-testing:$nav_version"
    implementation "androidx.navigation:navigation-compose:$nav_version"

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    // Required -- JUnit 4 framework
    testImplementation "junit:junit:$j_unit_version"
    // Optional -- Robolectric environment
    testImplementation "androidx.test:core:$android_x_test_version"
    // Optional -- Mockito framework
    testImplementation "org.mockito:mockito-core:$mockito_version"
    testImplementation "org.mockito:mockito-inline:$mockito_version"
    // Optional -- mockito-kotlin
    testImplementation "org.mockito.kotlin:mockito-kotlin:$mockito_kotlin_version"
    // Optional -- Mockk framework
    testImplementation "io.mockk:mockk:$mockk_version"
    // coroutines test
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutine_version"
    // core test
    testImplementation "androidx.arch.core:core-testing:2.1.0"
}

jacoco {
    toolVersion = "$jococo_version"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

def fileFilter = [
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*Test*.*',
        'android/**/*.*',
        '**/fragments/*',
        '**/adapters/*',
        '**/activities/*',
        '**/animations/*'
]
def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
def mainSrc = "$project.projectDir/src/main/java"

task jacocoTestReport(type: JacocoReport) {
    dependsOn = ['testDebugUnitTest', 'createDebugCoverageReport']
    reports {
        xml.enabled = true
        html.enabled = true
    }

    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree])
    executionData.from = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec',
            'outputs/code_coverage/debugAndroidTest/connected/*.ec'
    ])
}